# GitLab CI/CD pipeline for Django and Vue application
---
# Stages: build -> test -> deploy
# Release MRs run the full pipeline including Terraform and image push

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID
      when: always
    - when: never

# Docker-in-Docker runner using custom CI image
default:
  image: myregistry/my-ci-image:latest
  services:
    - name: docker:dind
      alias: docker
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_BUILDKIT: "1"
  before_script:
    - docker info
  cache:
    key: "$CI_PROJECT_ID-$CI_COMMIT_REF_SLUG"
    paths:
      - .cache/pip
      - .npm
  privileged: true

stages:
  - build
  - test
  - deploy

# ---- Build stage ----

# Build base images once per pipeline
build_base_images:
  stage: build
  script:
    - |
      docker build --build-arg TARGET_ENV=${CI_MERGE_REQUEST_TARGET_BRANCH_NAME} --target build -t myapp-build:${CI_COMMIT_SHA} .
      docker build --build-arg TARGET_ENV=${CI_MERGE_REQUEST_TARGET_BRANCH_NAME} --target sast -t myapp-sast:${CI_COMMIT_SHA} .
      docker build --build-arg TARGET_ENV=${CI_MERGE_REQUEST_TARGET_BRANCH_NAME} --target test -t myapp-test:${CI_COMMIT_SHA} .
      docker build --build-arg TARGET_ENV=${CI_MERGE_REQUEST_TARGET_BRANCH_NAME} --target test-runtime -t myapp-test-runtime:${CI_COMMIT_SHA} .
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ "^(feature|develop|release)$"'

# ---- Test stage ----
front_sast:
  stage: test
  script:
    - docker run --rm myapp-sast:${CI_COMMIT_SHA} sh -c 'eslint . -f json -o eslint-report.json'
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ "^(feature|develop|release)$"'
  needs:
    - build_base_images
  artifacts:
    reports:
      codequality: eslint-report.json
    expire_in: 1 week

backend_sast:
  stage: test
  script:
    - docker run --rm myapp-sast:${CI_COMMIT_SHA} sh -c 'ruff . --format=checkstyle > ruff-report.xml'
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ "^(feature|develop|release)$"'
  needs:
    - front_sast
  artifacts:
    reports:
      junit: ruff-report.xml
    expire_in: 1 week

tf_sast:
  stage: test
  script:
    - docker run --rm myapp-sast:${CI_COMMIT_SHA} sh -c 'tfsec /app/terraform --format sarif > tfsec-report.sarif'
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "release"'
  needs:
    - backend_sast
  artifacts:
    reports:
      sast: tfsec-report.sarif
    expire_in: 1 week

unit_tests:
  stage: test
  script:
    - docker run --rm myapp-test:${CI_COMMIT_SHA} pytest --junitxml=junit.xml tests/unit
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "release"'
  needs:
    - tf_sast
  artifacts:
    reports:
      junit: junit.xml
    expire_in: 1 week

functional_tests:
  stage: test
  script:
    - docker run -d --name django_app -p 8000:8000 myapp-test-runtime:${CI_COMMIT_SHA}
    - docker exec django_app pytest tests/functional
    - docker stop django_app
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "release"'
  needs:
    - unit_tests

# ---- Deploy stage ----
terraform_init:
  stage: deploy
  image: hashicorp/terraform:1.5.6
  script:
    - terraform init
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "release"'
  when: on_success

terraform_plan:
  stage: deploy
  image: hashicorp/terraform:1.5.6
  script:
    - terraform plan -out=tfplan
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "release"'
  needs:
    - terraform_init
  when: on_success

terraform_apply:
  stage: deploy
  image: hashicorp/terraform:1.5.6
  script:
    - terraform apply -auto-approve tfplan
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "release"'
  needs:
    - terraform_plan
  when: on_success

dev_deploy:
  stage: deploy
  script:
    - docker build --build-arg TARGET_ENV=develop --target runtime -t myapp:dev-${CI_COMMIT_SHA} .
    - echo "Deploying container to EC2 filesystem"
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"'

build_image:
  stage: deploy
  script:
    - docker build --build-arg TARGET_ENV=release --target build -t myapp-build:${CI_COMMIT_SHA} .
    - docker build --build-arg TARGET_ENV=release --target runtime -t myapp:${CI_COMMIT_SHA} .
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "release"'
  needs:
    - terraform_apply

push_image:
  stage: deploy
  image: amazon/aws-cli:latest
  script:
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ECR_ACCOUNT_URL
    - docker tag myapp:${CI_COMMIT_SHA} $AWS_ECR_ACCOUNT_URL/myapp:${CI_COMMIT_SHA}
    - docker push $AWS_ECR_ACCOUNT_URL/myapp:${CI_COMMIT_SHA}
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "release"'
  needs:
    - build_image
