# GitLab CI/CD pipeline for Django and Vue application
---
# Stages: build -> test -> deploy
# Release MRs run the full pipeline including Terraform and image push

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "tag"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: always
    - when: never

# Docker-in-Docker runner with BuildKit enabled
default:
  image: docker:24
  services:
    - name: docker:24-dind
      alias: docker
  tags: ["runner17"]
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_BUILDKIT: "1"
    MASK_SECRETS: "true"
    TFSEC_VERSION: "1.28.1"
  before_script:
    - docker info
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
  cache:
    key: "$CI_PROJECT_ID-$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    policy: pull-push
    paths:
      - .cache/pip
      - .npm

stages:
  - build
  - test
  - deploy

# ---- Build stage ----

# Build base images for all stages
# NOTE: Images are built separately for clarity. They could be consolidated
# using `docker buildx bake` for further optimization.
build_images:
  stage: build
  script:
    - docker buildx create --use
    - |
      docker buildx bake -f docker-bake.hcl all \
        --set *.args.TARGET_ENV=${CI_COMMIT_REF_NAME} \
        --set build.tags=$CI_REGISTRY_IMAGE/myapp-build:${CI_COMMIT_SHA},$CI_REGISTRY_IMAGE/myapp-build:latest \
        --set sast-node.tags=$CI_REGISTRY_IMAGE/myapp-sast-node:${CI_COMMIT_SHA} \
        --set sast-python.tags=$CI_REGISTRY_IMAGE/myapp-sast-python:${CI_COMMIT_SHA} \
        --set test.tags=$CI_REGISTRY_IMAGE/myapp-test:${CI_COMMIT_SHA} \
        --set test-runtime.tags=$CI_REGISTRY_IMAGE/myapp-test-runtime:${CI_COMMIT_SHA} \
        --set runtime.tags=$CI_REGISTRY_IMAGE/myapp-runtime:${CI_COMMIT_SHA} \
        --set *.cache-from=type=registry,ref=$CI_REGISTRY_IMAGE/myapp-build:latest \
        --set *.cache-to=type=inline \
        --push
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ "^(feature|develop|release)$" || $CI_COMMIT_TAG'

# ---- Test stage ----
front_sast:
  stage: test
  script:
    - docker run --rm $CI_REGISTRY_IMAGE/myapp-sast-node:${CI_COMMIT_SHA} sh -c 'cd /app/frontend 2>/dev/null || cd /app && eslint . -f sarif -o eslint.sarif'
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ "^(feature|develop|release)$" || $CI_COMMIT_TAG'
  needs:
    - build_images
  artifacts:
    reports:
      sast: eslint.sarif
    expire_in: 1 week

backend_sast:
  stage: test
  script:
    - docker run --rm $CI_REGISTRY_IMAGE/myapp-sast-python:${CI_COMMIT_SHA} sh -c 'ruff . --output-format sarif > ruff.sarif'
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ "^(feature|develop|release)$" || $CI_COMMIT_TAG'
  needs:
    - build_images
  artifacts:
    reports:
      sast: ruff.sarif
    expire_in: 1 week

tf_sast:
  stage: test
  script:
    - docker run --rm $CI_REGISTRY_IMAGE/myapp-sast-python:${CI_COMMIT_SHA} sh -c 'tfsec /app/terraform --format sarif > tfsec.sarif'
  rules:
    - if: '$CI_COMMIT_REF_NAME == "release" || $CI_COMMIT_TAG'
  needs:
    - build_images
  artifacts:
    reports:
      sast: tfsec.sarif
    expire_in: 1 week

unit_tests:
  stage: test
  script:
    - docker run --rm $CI_REGISTRY_IMAGE/myapp-test:${CI_COMMIT_SHA} pytest --junitxml=junit.xml tests/unit
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ "^(develop|release)$" || $CI_COMMIT_TAG'
  needs:
    - build_images
  artifacts:
    reports:
      junit: junit.xml
    expire_in: 1 week

functional_tests:
  stage: test
  script:
    - docker network create ci_bridge || true
    - docker run -d --name django_app --network ci_bridge $CI_REGISTRY_IMAGE/myapp-test-runtime:${CI_COMMIT_SHA}
    - docker exec django_app pytest tests/functional
    - docker stop django_app
  rules:
    - if: '$CI_COMMIT_REF_NAME == "release" || $CI_COMMIT_TAG'
  needs:
    - unit_tests

# ---- Deploy stage ----
terraform_init:
  stage: deploy
  image: hashicorp/terraform:1.5.6
  tags: [terraform]
  script:
    - terraform init
  rules:
    - if: '$CI_COMMIT_REF_NAME == "release"'
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_TAG =~ /^v/'
  when: on_success
  variables:
    AWS_REGION: $AWS_REGION
  # AWS credentials are supplied via protected variables

terraform_plan:
  stage: deploy
  image: hashicorp/terraform:1.5.6
  tags: [terraform]
  script:
    - terraform plan -out=tfplan
  rules:
    - if: '$CI_COMMIT_REF_NAME == "release"'
  needs:
    - terraform_init
  when: on_success
  variables:
    AWS_REGION: $AWS_REGION
  # AWS credentials are supplied via protected variables

terraform_apply:
  stage: deploy
  image: hashicorp/terraform:1.5.6
  tags: [terraform]
  script:
    - terraform apply -auto-approve tfplan
  rules:
    - if: '$CI_COMMIT_REF_NAME == "release"'
  needs:
    - terraform_plan
  when: on_success
  variables:
    AWS_REGION: $AWS_REGION
  # AWS credentials are supplied via protected variables

dev_deploy:
  stage: deploy
  script:
    - docker pull $CI_REGISTRY_IMAGE/myapp-runtime:${CI_COMMIT_SHA}
    - docker tag $CI_REGISTRY_IMAGE/myapp-runtime:${CI_COMMIT_SHA} myapp:dev-${CI_COMMIT_SHORT_SHA}
    - echo "Deploying container to EC2 filesystem"
  rules:
    - if: '$CI_COMMIT_REF_NAME == "develop"'
  needs:
    - functional_tests

build_image:
  stage: deploy
  script:
    - docker pull $CI_REGISTRY_IMAGE/myapp-runtime:${CI_COMMIT_SHA}
    - |
      DATE_TAG=$(date +%Y%m%d.%H%M)-${CI_COMMIT_SHORT_SHA}
      docker tag $CI_REGISTRY_IMAGE/myapp-runtime:${CI_COMMIT_SHA} myapp:${DATE_TAG}
      echo $DATE_TAG > image_tag.txt
  rules:
    - if: '$CI_COMMIT_REF_NAME == "release"'
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_TAG =~ /^v/'
  needs:
    - terraform_apply
  artifacts:
    paths:
      - image_tag.txt

push_image:
  stage: deploy
  image: amazon/aws-cli:latest
  script:
    - set +x
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin --quiet $AWS_ECR_ACCOUNT_URL
    - set -x
    - DATE_TAG=$(cat image_tag.txt)
    - docker tag myapp:${DATE_TAG} $AWS_ECR_ACCOUNT_URL/myapp:${DATE_TAG}
    - docker push $AWS_ECR_ACCOUNT_URL/myapp:${DATE_TAG}
  rules:
    - if: '$CI_COMMIT_REF_NAME == "release"'
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_TAG =~ /^v/'
  needs:
    - build_image
  variables:
    MASK_SECRETS: 'true'
  # AWS credentials are supplied via protected variables
